# # Deploy to aws
# name: Deploy Staging to AWS

# # Controls when the action will run.
# on:
#   push:
#     branches: [staging]

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   build:
#     runs-on: ${{ matrix.os }}

#     strategy:
#       matrix:
#         os: [ubuntu-latest]
#         node: [16]

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       - name: Checkout 🛎
#         uses: actions/checkout@master

#       - name: Setup node env 🏗
#         uses: actions/setup-node@v2.4.1
#         with:
#           node-version: ${{ matrix.node }}
#           check-latest: true

#       - name: Get yarn cache directory path 🛠
#         id: yarn-cache-dir-path
#         run: echo "::set-output name=dir::$(yarn cache dir)"

#       - name: Cache node_modules 📦
#         uses: actions/cache@v2.1.6
#         id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
#         with:
#           path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
#           key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-yarn-

#       - name: Install dependencies 👨🏻‍💻
#         run: yarn install --prefer-offline --frozen-lockfile --non-interactive --production=false

#       - name: Make envfile
#         uses: SpicyPizza/create-envfile@v1.3
#         with:
#           envkey_APP_NAME: ${{ secrets.APP_NAME }}
#           envkey_APP_SHORT_NAME: ${{ secrets.APP_SHORT_NAME }}
#           envkey_APP_URL: ${{ secrets.STAGING_APP_URL }}
#           envkey_API_BASE_URL: ${{ secrets.DEV_API_BASE_URL }}
#           envkey_API_FAKE_URL: ${{ secrets.API_FAKE_URL }}
#           envkey_AWS_CDN: ${{ secrets.STAGING_AWS_CDN }}
#           envkey_WORKFLOW: ${{ secrets.STAGING_WORKFLOW }}
#           envkey_GOOGLE_MAP_KEY: ${{ secrets.GOOGLE_MAP_KEY }}
#           envkey_STRIPE_KEY: ${{ secrets.DEV_STRIPE_KEY }}
#           envkey_FACEBOOK_CLIENT_ID: ${{ secrets.DEV_FACEBOOK_CLIENT_ID }}
#           envkey_FACEBOOK_REDIRECT_URL: ${{ secrets.STAGING_FACEBOOK_REDIRECT_URL }}
#           envkey_FACEBOOK_SCOPE: ${{ secrets.DEV_FACEBOOK_SCOPE }}
#           envkey_INSTAGRAM_CLIENT_ID: ${{ secrets.DEV_INSTAGRAM_CLIENT_ID }}
#           envkey_INSTAGRAM_REDIRECT_URL: ${{ secrets.STAGING_INSTAGRAM_REDIRECT_URL }}
#           envkey_INSTAGRAM_SCOPE: ${{ secrets.DEV_INSTAGRAM_SCOPE }}
#           envkey_LINKEDIN_CLIENT_ID: ${{ secrets.DEV_LINKEDIN_CLIENT_ID }}
#           envkey_LINKEDIN_REDIRECT_URL: ${{ secrets.STAGING_LINKEDIN_REDIRECT_URL }}
#           envkey_LINKEDIN_SCOPE: ${{ secrets.DEV_LINKEDIN_SCOPE }}
#           envkey_TWITTER_CLIENT_ID: ${{ secrets.DEV_TWITTER_CLIENT_ID }}
#           envkey_TWITTER_REDIRECT_URL: ${{ secrets.STAGING_TWITTER_REDIRECT_URL }}
#           envkey_TWITTER_SCOPE: ${{ secrets.DEV_TWITTER_SCOPE }}
#           envkey_YOUTUBE_CLIENT_ID: ${{ secrets.STAGING_YOUTUBE_CLIENT_ID }}
#           envkey_YOUTUBE_REDIRECT_URL: ${{ secrets.STAGING_YOUTUBE_REDIRECT_URL }}
#           envkey_YOUTUBE_SCOPE: ${{ secrets.STAGING_YOUTUBE_SCOPE }}
#           envkey_SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
#           envkey_SENTRY_DSN: ${{ secrets.STAGING_SENTRY_DSN }}
#           envkey_SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
#           envkey_SENTRY_PROJECT: ${{ secrets.STAGING_SENTRY_PROJECT }}
#           envkey_GIT_COMMIT_SHA: ${{ github.sha }}
#           envkey_GOOGLE_MEASUREMENT_ID: ${{ secrets.GOOGLE_MEASUREMENT_ID }}
#           envkey_GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
#           envkey_GOOGLE_TAG_MANAGER_ID: ${{ secrets.GOOGLE_TAG_MANAGER_ID }}
#           envkey_FACEBOOK_PIXEL_ID: ${{ secrets.FACEBOOK_PIXEL_ID }}
#           envkey_META_KEYWORDS: ${{ secrets.META_KEYWORDS }}

#       - name: Run builder
#         run: yarn build

#       - name: Install production dependencies
#         run: |
#           rm -rf node_modules
#           NODE_ENV=production yarn install --prefer-offline --pure-lockfile --non-interactive --production=true

#       - name: Archive necessary folders and files
#         uses: montudor/action-zip@v1
#         with:
#           args: zip -qq -r dist.zip .env .nuxt static nuxt.config.js modules node_modules package.json ecosystem.config.js

#       # Configure AWS credential and region environment variables for use with the AWS CLI and AWS SDKs
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Upload to Amazon S3
#         run: aws s3 sync --delete .nuxt/dist/client s3://${{ secrets.STAGING_AWS_S3_DESTINATION }}

#       - name: Install SSH key
#         uses: shimataro/ssh-key-action@v2
#         with:
#           key: ${{ secrets.STAGING_SSH_KEY }}
#           known_hosts: ${{ secrets.STAGING_HOST }}

#       - name: Adding Known Hosts
#         run: ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

#       - name: Rsync over ssh
#         run: rsync -avz dist.zip ${{ secrets.USERNAME }}@${{ secrets.STAGING_HOST }}:/home/${{ secrets.USERNAME }}

#       - name: Executing remote ssh commands using ssh key
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.STAGING_HOST }}
#           username: ${{ secrets.USERNAME }}
#           key: ${{ secrets.STAGING_SSH_KEY }}
#           port: ${{ secrets.PORT }}
#           script: |
#             export PATH=/home/ubuntu/.fnm:$PATH
#             eval "`fnm env`"
#             source ~/.bashrc
#             rm -rf app
#             mkdir app
#             mv dist.zip app
#             cd app
#             unzip dist.zip
#             pm2 delete SharpArchiveStaging
#             pm2 start --only SharpArchiveStaging

#       - name: Send message to Slack
#         id: slack
#         uses: slackapi/slack-github-action@v1.18.0
#         with:
#           # For posting a rich message using Block Kit
#           payload: |
#             {
#               "blocks": [
#                 {
#                   "type": "header",
#                   "text": {
#                     "type": "plain_text",
#                     "text": "Deployment to Sharp Archive",
#                     "emoji": true
#                   }
#                 },
#                 {
#                   "type": "divider"
#                 },
#                 {
#                   "type": "section",
#                   "fields": [
#                     {
#                       "type": "mrkdwn",
#                       "text": "*Status*\n${{ job.status }}"
#                     },
#                     {
#                       "type": "mrkdwn",
#                       "text": "*Deployed by:*\n<${{ github.event.repository.owner.html_url}}|${{ github.event.repository.owner.name}}>"
#                     }
#                   ]
#                 }
#               ]
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#           SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
